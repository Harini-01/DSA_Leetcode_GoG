Given a connected undirected graph containing V vertices, represented by a 2-d adjacency list adj[][], where each adj[i] 
represents the list of vertices connected to vertex i. Perform a Breadth First Search (BFS) traversal starting from vertex 0, 
visiting vertices from left to right according to the given adjacency list, and return a list containing the BFS traversal of the graph.

Note: Do traverse in the same order as they are in the given adjacency list.

SOLUTION:
class Solution {
  public:
    // Function to return Breadth First Traversal of given graph.
    vector<int> bfs(vector<vector<int>> &adj) {
        // Code here
        int n = adj.size();
        vector<int> trav;
        vector<int> vis(n, 0);
        
        for(int i = 0; i < n; i++)
        {
            if(!vis[i])
            {
                bfs_graph(i, adj, trav, vis);
            }
        }
        return trav;
    }
    
    void bfs_graph(int node, vector<vector<int>> &adj, vector<int> &trav, vector<int> &vis)
    {
        queue<int> q;
        q.push(node);
        vis[node] = 1;
        trav.push_back(node);
    
        
        while(!q.empty())
        {
            int nn = q.front();
            q.pop();

            
            for(auto v : adj[nn])
            {
                if(!vis[v])
                {
                    q.push(v);
                    vis[v] = 1;
                    trav.push_back(v);
                }
            }
        }
    }
};


T.C: O(V+E)
S.C: O(N)
