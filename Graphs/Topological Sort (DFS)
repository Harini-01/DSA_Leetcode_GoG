Given a Directed Acyclic Graph (DAG) of V (0 to V-1) vertices and E edges represented as a 2D vector edges[][], 
where each entry edges[i] = [u, v] denotes an directed edge u -> v. Return topological sort for the given graph.

Topological sorting for Directed Acyclic Graph (DAG) is a linear ordering of vertices such that for every 
directed edge u -> v, vertex u comes before v in the ordering.
Note: As there are multiple Topological orders possible, you may return any of them. 
If your returned Topological sort is correct then the output will be 1 else 0.

Solution:
class Solution {
  public:
    vector<int> topoSort(int V, vector<vector<int>>& edges) {
        // code here
        vector<vector<int>> adj(V);
        for(auto e:edges)
        {
            adj[e[0]].push_back(e[1]);
        }
        
        vector<int> vis(V,0);
        vector<int> topo;
        
        for(int i = 0; i < V; i++)
        {   
            if(!vis[i])
            {
                dfs(i, adj, vis, topo);
            }
        }
        
        reverse(topo.begin(), topo.end());
        return topo;
    }
    
    void dfs(int node, vector<vector<int>> &adj, vector<int> &vis, vector<int> &topo)
    {
        vis[node] = 1;
        
        for(auto v:adj[node])
        {
            if(!vis[v])
            {
                dfs(v, adj, vis, topo);
            }
        }
        
        topo.push_back(node);
    }
};

T.C: O(V+E)
S.C: O(V+E)
