Given a connected undirected graph containing V vertices represented by a 2-d adjacency list adj[][], where each adj[i] 
represents the list of vertices connected to vertex i. Perform a Depth First Search (DFS) traversal starting from vertex 0, 
visiting vertices from left to right as per the given adjacency list, and return a list containing the DFS traversal of the graph.

Note: Do traverse in the same order as they are in the given adjacency list.

Solution:
class Solution {
    
    
  public:
    vector<int> dfs(vector<vector<int>>& adj) {
        // Code here
        int n = adj.size();
        vector<int> trav;
        vector<int> vis(n, 0);
        
        for(int i = 0; i < n; i++)
        {
            if(!vis[i])
            {
                dfs_graph(i, adj, trav, vis);
            }
        }
        
        return trav;
    }
    
    void dfs_graph(int node, vector<vector<int>> &adj, vector<int> &trav, vector<int> &vis)
    {
        vis[node] = 1;
        trav.push_back(node);
        
        for(auto v: adj[node])
        {
            if(!vis[v])
            {
                dfs_graph(v, adj, trav, vis);
            }
        }
    }
    
};


T.C: O(V+E)
S.C: O(N)
